(ns honeysql-postgres.ddl-grammar.data-type-test
  (:require [clojure.test :refer [deftest is testing]]
            [honeysql.core :as sql]
            [honeysql-postgres.ddl-grammar.data-type :as ddl]
            [honeysql-postgres.parser :as p]
            [honeysql-postgres.types :as pg-sqlt]))

(deftest test-parse-data-type--numeric
  (testing "integer types"
    (is (= (pg-sqlt/->PgSqlSimpleType :int)
           (p/parse ddl/type [:int])))
    (is (= (pg-sqlt/->PgSqlSimpleType :integer)
           (p/parse ddl/type [:integer])  ))
    (is (= (pg-sqlt/->PgSqlSimpleType :smallint)
           (p/parse ddl/type [:smallint])))
    (is (= (pg-sqlt/->PgSqlSimpleType :bigint)
           (p/parse ddl/type [:bigint])))
    (is (= (pg-sqlt/->PgSqlSimpleType :int2)
           (p/parse ddl/type [:int2])))
    (is (= (pg-sqlt/->PgSqlSimpleType :int4)
           (p/parse ddl/type [:int4])))
    (is (= (pg-sqlt/->PgSqlSimpleType :int8)
           (p/parse ddl/type [:int8]))))
  (testing "arbitrary precision number types"
    (testing "no precision or scale"
      (is (= (pg-sqlt/->PgSqlArbitraryPrecisionType :numeric nil nil)
             (p/parse ddl/type [:numeric])))
      (is (= (pg-sqlt/->PgSqlArbitraryPrecisionType :decimal nil nil)
             (p/parse ddl/type [:decimal]))))
    (testing "with precision"
      (is (= (pg-sqlt/->PgSqlArbitraryPrecisionType :numeric 40 nil)
             (p/parse ddl/type [:numeric [40]])))
      (is (= (pg-sqlt/->PgSqlArbitraryPrecisionType :decimal 40 nil)
             (p/parse ddl/type [:decimal [40]]))))
    (testing "with precision and scale"
      (is (= (pg-sqlt/->PgSqlArbitraryPrecisionType :numeric 40 10)
             (p/parse ddl/type [:numeric [40 10]])))
      (is (= (pg-sqlt/->PgSqlArbitraryPrecisionType :decimal 40 10)
             (p/parse ddl/type [:decimal [40 10]])))))
  (testing "floating point types"
    (testing "with no precision"
      (is (= (pg-sqlt/->PgSqlSimpleType :real)
             (p/parse ddl/type [:real])))
      (is (= (pg-sqlt/->PgSqlSimpleType :double-precision)
             (p/parse ddl/type [:double-precision])))
      (is (= (pg-sqlt/->PgSqlSimpleType :float8)
             (p/parse ddl/type [:float8])))
      (is (= (pg-sqlt/->PgSqlFloatType nil)
             (p/parse ddl/type [:float]))))
    (testing "with precision"
      (is (= (pg-sqlt/->PgSqlFloatType 10)
             (p/parse ddl/type [:float [10]])))))
  (testing "serial types"
    (is (= (pg-sqlt/->PgSqlSimpleType :serial)
           (p/parse ddl/type [:serial])))
    (is (= (pg-sqlt/->PgSqlSimpleType :serial4)
           (p/parse ddl/type [:serial4])))
    (is (= (pg-sqlt/->PgSqlSimpleType :bigserial)
           (p/parse ddl/type [:bigserial])))
    (is (= (pg-sqlt/->PgSqlSimpleType :serial8)
           (p/parse ddl/type [:serial8])))
    (is (= (pg-sqlt/->PgSqlSimpleType :smallserial)
           (p/parse ddl/type [:smallserial])))
    (is (= (pg-sqlt/->PgSqlSimpleType :serial2)
           (p/parse ddl/type [:serial2])))))

(deftest test-parse-data-type--strings
  (is (= (pg-sqlt/->PgSqlSimpleType :text)
         (p/parse ddl/type [:text])))
  (testing "with no lengths"
    (is (= (pg-sqlt/->PgSqlStringType :bit nil)
           (p/parse ddl/type [:bit])))
    (is (= (pg-sqlt/->PgSqlStringType :bit-varying nil)
           (p/parse ddl/type [:bit-varying])))
    (is (= (pg-sqlt/->PgSqlStringType :char nil)
           (p/parse ddl/type [:char])))
    (is (= (pg-sqlt/->PgSqlStringType :character nil)
           (p/parse ddl/type [:character])))
    (is (= (pg-sqlt/->PgSqlStringType :character-varying nil)
           (p/parse ddl/type [:character-varying])))
    (is (= (pg-sqlt/->PgSqlStringType :varbit nil)
           (p/parse ddl/type [:varbit])))
    (is (= (pg-sqlt/->PgSqlStringType :varchar nil)
           (p/parse ddl/type [:varchar]))))
  (testing "with lengths"
    (is (= (pg-sqlt/->PgSqlStringType :bit 20)
           (p/parse ddl/type [:bit [20]])))
    (is (= (pg-sqlt/->PgSqlStringType :bit-varying 20)
           (p/parse ddl/type [:bit-varying [20]])))
    (is (= (pg-sqlt/->PgSqlStringType :char 20)
           (p/parse ddl/type [:char [20]])))
    (is (= (pg-sqlt/->PgSqlStringType :character 20)
           (p/parse ddl/type [:character [20]])))
    (is (= (pg-sqlt/->PgSqlStringType :character-varying 20)
           (p/parse ddl/type [:character-varying [20]])))
    (is (= (pg-sqlt/->PgSqlStringType :varbit 20)
           (p/parse ddl/type [:varbit [20]])))
    (is (= (pg-sqlt/->PgSqlStringType :varchar 20)
           (p/parse ddl/type [:varchar [20]])))))

(deftest test-parse-data-type--temporal
  (testing "timestamps"
    (testing "without time zones"
      (is (= (pg-sqlt/->PgSqlTimeType :timestamp nil nil)
             (p/parse ddl/type [:timestamp]))
          "plain TIMESTAMP")
      (is (= (pg-sqlt/->PgSqlTimeType :timestamp nil false)
             (p/parse ddl/type [:timestamp :without-time-zone]))
          "including :without-time-zone")
      (is (= (pg-sqlt/->PgSqlSimpleType :timestamp-without-time-zone)
             (p/parse ddl/type [:timestamp-without-time-zone]))
          "compound keyword")
      (is (= (pg-sqlt/->PgSqlTimeType :timestamp 2 nil)
             (p/parse ddl/type [:timestamp [2]]))
          "with precision")
      (is (= (pg-sqlt/->PgSqlTimeType :timestamp 2 false)
             (p/parse ddl/type [:timestamp [2] :without-time-zone]))
          "with precision and :without-time-zone"))
    (testing "with time zones"
      (is (= (pg-sqlt/->PgSqlSimpleType :timestamptz)
             (p/parse ddl/type [:timestamptz]))
          "TIMESTAMPTZ (postgres extension)")
      (is (= (pg-sqlt/->PgSqlSimpleType :timestamp-with-time-zone)
             (p/parse ddl/type [:timestamp-with-time-zone]))
          "compound keyword")
      (is (= (pg-sqlt/->PgSqlTimeType :timestamp 2 true)
             (p/parse ddl/type [:timestamp [2] :with-time-zone]))
          "with precision")))
  (testing "date"
    (is (= (pg-sqlt/->PgSqlSimpleType :date)
           (p/parse ddl/type [:date]))))
  (testing "times"
    (testing "without time zones"
      (is (= (pg-sqlt/->PgSqlTimeType :time nil nil)
             (p/parse ddl/type [:time]))
          "plain TIME")
      (is (= (pg-sqlt/->PgSqlTimeType :time nil false)
             (p/parse ddl/type [:time :without-time-zone]))
          "including :without-time-zone")
      (is (= (pg-sqlt/->PgSqlSimpleType :time-without-time-zone)
             (p/parse ddl/type [:time-without-time-zone]))
          "compound keyword")
      (is (= (pg-sqlt/->PgSqlTimeType :time 2 nil)
             (p/parse ddl/type [:time [2]]))
          "with precision")
      (is (= (pg-sqlt/->PgSqlTimeType :time 2 false)
             (p/parse ddl/type [:time [2] :without-time-zone]))
          "with precision and :without-time-zone"))
    (testing "with time zones"
      (is (= (pg-sqlt/->PgSqlSimpleType :timetz)
             (p/parse ddl/type [:timetz]))
          "timetz keyword")
      (is (= (pg-sqlt/->PgSqlSimpleType :time-with-time-zone)
             (p/parse ddl/type [:time-with-time-zone]))
          "compound keyword")
      (is (= (pg-sqlt/->PgSqlTimeType :time 2 true)
             (p/parse ddl/type [:time [2] :with-time-zone]))
          "with precision")))
  (testing "intervals"
    (is (= (pg-sqlt/->PgSqlIntervalType nil nil)
           (p/parse ddl/type [:interval]))
        "only interval")
    (is (= (pg-sqlt/->PgSqlIntervalType nil 4)
           (p/parse ddl/type [:interval [4]]))
        "with precision")
    (testing "with field"
      (testing "year"
        (is (= (pg-sqlt/->PgSqlIntervalType :year nil)
               (p/parse ddl/type [:interval :year]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :year 2)
               (p/parse ddl/type [:interval :year [2]]))
            "with precision"))
      (testing "month"
        (is (= (pg-sqlt/->PgSqlIntervalType :month nil)
               (p/parse ddl/type [:interval :month]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :month 2)
               (p/parse ddl/type [:interval :month [2]]))
            "with precision"))
      (testing "day"
        (is (= (pg-sqlt/->PgSqlIntervalType :day nil)
               (p/parse ddl/type [:interval :day]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :day 2)
               (p/parse ddl/type [:interval :day [2]]))
            "with precision"))
      (testing "hour"
        (is (= (pg-sqlt/->PgSqlIntervalType :hour nil)
               (p/parse ddl/type [:interval :hour]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :hour 2)
               (p/parse ddl/type [:interval :hour [2]]))
            "with precision"))
      (testing "minute"
        (is (= (pg-sqlt/->PgSqlIntervalType :minute nil)
               (p/parse ddl/type [:interval :minute]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :minute 2)
               (p/parse ddl/type [:interval :minute [2]]))
            "with precision"))
      (testing "second"
        (is (= (pg-sqlt/->PgSqlIntervalType :second nil)
               (p/parse ddl/type [:interval :second]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :second 2)
               (p/parse ddl/type [:interval :second [2]]))
            "with precision"))
      (testing "year-to-month"
        (is (= (pg-sqlt/->PgSqlIntervalType :year-to-month nil)
               (p/parse ddl/type [:interval :year-to-month]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :year-to-month 2)
               (p/parse ddl/type [:interval :year-to-month [2]]))
            "with precision"))
      (testing "day-to-hour"
        (is (= (pg-sqlt/->PgSqlIntervalType :day-to-hour nil)
               (p/parse ddl/type [:interval :day-to-hour]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :day-to-hour 2)
               (p/parse ddl/type [:interval :day-to-hour [2]]))
            "with precision"))
      (testing "day-to-minute"
        (is (= (pg-sqlt/->PgSqlIntervalType :day-to-minute nil)
               (p/parse ddl/type [:interval :day-to-minute]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :day-to-minute 2)
               (p/parse ddl/type [:interval :day-to-minute [2]]))
            "with precision"))
      (testing "day-to-second"
        (is (= (pg-sqlt/->PgSqlIntervalType :day-to-second nil)
               (p/parse ddl/type [:interval :day-to-second]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :day-to-second 2)
               (p/parse ddl/type [:interval :day-to-second [2]]))
            "with precision"))
      (testing "hour-to-minute"
        (is (= (pg-sqlt/->PgSqlIntervalType :hour-to-minute nil)
               (p/parse ddl/type [:interval :hour-to-minute]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :hour-to-minute 2)
               (p/parse ddl/type [:interval :hour-to-minute [2]]))
            "with precision"))
      (testing "hour-to-second"
        (is (= (pg-sqlt/->PgSqlIntervalType :hour-to-second nil)
               (p/parse ddl/type [:interval :hour-to-second]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :hour-to-second 2)
               (p/parse ddl/type [:interval :hour-to-second [2]]))
            "with precision"))
      (testing "minute-to-second"
        (is (= (pg-sqlt/->PgSqlIntervalType :minute-to-second nil)
               (p/parse ddl/type [:interval :minute-to-second]))
            "without precision")
        (is (= (pg-sqlt/->PgSqlIntervalType :minute-to-second 2)
               (p/parse ddl/type [:interval :minute-to-second [2]]))
            "with precision")))))

(deftest test-parse-data-type--misc
  (testing "money type"
    (is (= (pg-sqlt/->PgSqlSimpleType :money)
           (p/parse ddl/type [:money]))))
  (testing "binary types"
    (is (= (pg-sqlt/->PgSqlSimpleType :bytea)
           (p/parse ddl/type [:bytea])))
    (is (= (pg-sqlt/->PgSqlSimpleType :blob)
           (p/parse ddl/type [:blob])))
    (is (= (pg-sqlt/->PgSqlSimpleType :binary-large-object)
           (p/parse ddl/type [:binary-large-object]))))
  (testing "boolean type"
    (is (= (pg-sqlt/->PgSqlSimpleType :bool)
           (p/parse ddl/type [:bool])))
    (is (= (pg-sqlt/->PgSqlSimpleType :boolean)
           (p/parse ddl/type [:boolean]))))
  (testing "geometric type"
    (is (= (pg-sqlt/->PgSqlSimpleType :point)
           (p/parse ddl/type [:point])))
    (is (= (pg-sqlt/->PgSqlSimpleType :line)
           (p/parse ddl/type [:line])))
    (is (= (pg-sqlt/->PgSqlSimpleType :lseg)
           (p/parse ddl/type [:lseg])))
    (is (= (pg-sqlt/->PgSqlSimpleType :box)
           (p/parse ddl/type [:box])))
    (is (= (pg-sqlt/->PgSqlSimpleType :path)
           (p/parse ddl/type [:path])))
    (is (= (pg-sqlt/->PgSqlSimpleType :polygon)
           (p/parse ddl/type [:polygon])))
    (is (= (pg-sqlt/->PgSqlSimpleType :circle)
           (p/parse ddl/type [:circle]))))
  (testing "network type"
    (is (= (pg-sqlt/->PgSqlSimpleType :cidr)
           (p/parse ddl/type [:cidr])))
    (is (= (pg-sqlt/->PgSqlSimpleType :inet)
           (p/parse ddl/type [:inet])))
    (is (= (pg-sqlt/->PgSqlSimpleType :macaddr)
           (p/parse ddl/type [:macaddr])))
    (is (= (pg-sqlt/->PgSqlSimpleType :macaddr8)
           (p/parse ddl/type [:macaddr8]))))
  (testing "text search type"
    (is (= (pg-sqlt/->PgSqlSimpleType :tsvector)
           (p/parse ddl/type [:tsvector])))
    (is (= (pg-sqlt/->PgSqlSimpleType :tsquery)
           (p/parse ddl/type [:tsquery]))))
  (testing "UUID type"
    (is (= (pg-sqlt/->PgSqlSimpleType :uuid)
           (p/parse ddl/type [:uuid]))))
  (testing "XML type"
    (is (= (pg-sqlt/->PgSqlSimpleType :xml)
           (p/parse ddl/type [:xml]))))
  (testing "JSON types"
    (is (= (pg-sqlt/->PgSqlSimpleType :json)
           (p/parse ddl/type [:json])))
    (is (= (pg-sqlt/->PgSqlSimpleType :jsonb)
           (p/parse ddl/type [:jsonb])))))

(deftest test-parse-data-type--unknown
  (testing "postgres types"
    (is (= :pg_lsn
           (p/parse ddl/type [:pg_lsn])))
    (is (= :txid_snapshot
           (p/parse ddl/type [:txid_snapshot]))))
  (testing "honeysql helpers"
    (is (= (sql/raw "FOO")
           (p/parse ddl/type [(sql/raw "FOO")])))
    (is (= (sql/call :varchar 32)
           (p/parse ddl/type [(sql/call :varchar 32)])))))

(deftest test-parse-data-type--arrays
  (testing "arrays using standard SQL syntax"
    (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [] true)
           (p/parse ddl/type [:integer :array]))
        "without size")
    (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [[4]] true)
           (p/parse ddl/type [:integer :array [4]]))
        "with size"))
  (testing "arrays using the PosgreSQL syntax"
    (testing "one dimension"
      (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [[]] false)
             (p/parse ddl/type [:integer []]))
          "without size")
      (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [[4]] false)
             (p/parse ddl/type [:integer [4]]))
          "with size"))
    (testing "multiple dimension"
      (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [[] [] [] []] false)
             (p/parse ddl/type [:integer [] [] [] []]))
          "without sizes")
      (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [[4] [3] [2] [1]] false)
             (p/parse ddl/type [:integer [4] [3] [2] [1]]))
          "with sizes")
      (is (= (pg-sqlt/->PgSqlArrayType (pg-sqlt/->PgSqlSimpleType :integer) [[] [3] [] [1]] false)
             (p/parse ddl/type [:integer [] [3] [] [1]]))
          "mixing with and without sizes"))))
